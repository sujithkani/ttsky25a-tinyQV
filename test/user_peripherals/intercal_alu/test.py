# SPDX-FileCopyrightText: Â© 2025 Tiny Tapeout
# SPDX-License-Identifier: Apache-2.0

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import ClockCycles

from tqv import TinyQV

# When submitting your design, change this to the peripheral number
# in peripherals.v.  e.g. if your design is i_user_peri05, set this to 5.
# The peripheral number is not used by the test harness.
PERIPHERAL_NUM = 37

@cocotb.test()
async def test_project(dut):
    dut._log.info("Start")

    # Set the clock period to 100 ns (10 MHz)
    clock = Clock(dut.clk, 100, units="ns")
    cocotb.start_soon(clock.start())

    # Interact with your design's registers through this TinyQV class.
    # This will allow the same test to be run when your design is integrated
    # with TinyQV - the implementation of this class will be replaces with a
    # different version that uses Risc-V instructions instead of the SPI test
    # harness interface to read and write the registers.
    tqv = TinyQV(dut, PERIPHERAL_NUM)

    # Reset
    await tqv.reset()

    dut._log.info("Test project behavior")

    # Test register write and read back
    await tqv.write_word_reg(0, 0x82345678)
    await tqv.write_word_reg(4, 0x89ABCDEF)
    assert await tqv.read_hword_reg(0) == 0x5678
    assert await tqv.read_hword_reg(2) == 0x8234
    assert await tqv.read_hword_reg(4) == 0xCDEF
    assert await tqv.read_hword_reg(6) == 0x89AB
    assert await tqv.read_word_reg(0) == 0x82345678
    assert await tqv.read_word_reg(4) == 0x89ABCDEF

    # Write to low 16 bits
    await tqv.write_hword_reg(0, 0x7777)
    await tqv.write_hword_reg(4, 0x5656)
    assert await tqv.read_hword_reg(0) == 0x7777
    assert await tqv.read_hword_reg(2) == 0x8234
    assert await tqv.read_hword_reg(4) == 0x5656
    assert await tqv.read_hword_reg(6) == 0x89AB
    assert await tqv.read_word_reg(0) == 0x82347777
    assert await tqv.read_word_reg(4) == 0x89AB5656

    # Write to high 16 bits
    await tqv.write_hword_reg(2, 0xBABA)
    await tqv.write_hword_reg(6, 0xDADA)
    assert await tqv.read_hword_reg(0) == 0x7777
    assert await tqv.read_hword_reg(2) == 0xBABA
    assert await tqv.read_hword_reg(4) == 0x5656
    assert await tqv.read_hword_reg(6) == 0xDADA
    assert await tqv.read_word_reg(0) == 0xBABA7777
    assert await tqv.read_word_reg(4) == 0xDADA5656

    async def test_and16(a, y):
        await tqv.write_hword_reg(0, a)
        assert await tqv.read_hword_reg(8) == y
        await tqv.write_hword_reg(2, a)
        assert await tqv.read_hword_reg(10) == y

    async def test_and32(a, y):
        await tqv.write_word_reg(0, a)
        assert await tqv.read_word_reg(12) == y

    async def test_or16(a, y):
        await tqv.write_hword_reg(2, a)
        assert await tqv.read_hword_reg(18) == y
        await tqv.write_hword_reg(0, a)
        assert await tqv.read_hword_reg(16) == y

    async def test_or32(a, y):
        await tqv.write_word_reg(0, a)
        assert await tqv.read_word_reg(20) == y

    async def test_xor16(a, y):
        await tqv.write_hword_reg(0, a)
        assert await tqv.read_hword_reg(24) == y
        await tqv.write_hword_reg(2, a)
        assert await tqv.read_hword_reg(26) == y

    async def test_xor32(a, y):
        await tqv.write_word_reg(0, a)
        assert await tqv.read_word_reg(28) == y

    async def test_select16(a, b, y):
        await tqv.write_hword_reg(2, a)
        await tqv.write_hword_reg(6, b)
        await tqv.read_hword_reg(42) == y
        await tqv.write_hword_reg(0, a)
        await tqv.write_hword_reg(4, b)
        await tqv.read_hword_reg(40) == y

    async def test_select32(a, b, y):
        await tqv.write_word_reg(0, a)
        await tqv.write_word_reg(4, b)
        await tqv.read_word_reg(44) == y

    async def test_mingle16(a, b, y):
        await tqv.write_hword_reg(0, a)
        await tqv.write_hword_reg(4, b)
        await tqv.read_word_reg(32) == y
        await tqv.write_hword_reg(2, a)
        await tqv.write_hword_reg(6, b)
        await tqv.read_word_reg(36) == y

    # Wikipedia example
    await test_select16(51, 21, 5)

    # INTERCAL manual examples
    await test_mingle16(0, 256, 65536)
    await test_mingle16(65535, 0, 2863311530)
    await test_mingle16(0, 65535, 1431655765)
    await test_mingle16(255, 255, 65535)
    await test_select16(179, 201, 9)
    await test_select16(201, 179, 17)
    await test_select16(179, 179, 31)
    await test_select16(201, 201, 15)
    await test_and16(77, 4)
    await test_or16(77, 32879)
    await test_xor16(77, 32875)

    # INTERCAL automatic examples
    # Of course, we do not need to add any, as they are, by nature, automatic.
    pass

    # AND16
    await test_and16(0x0000, 0x0000)
    await test_and16(0x0004, 0x0000)
    await test_and16(0x0002, 0x0000)
    await test_and16(0x0001, 0x0000)
    await test_and16(0x8000, 0x0000)
    await test_and16(0x4000, 0x0000)
    await test_and16(0x2000, 0x0000)
    await test_and16(0x0006, 0x0002)
    await test_and16(0x0003, 0x0001)
    await test_and16(0x8001, 0x8000)
    await test_and16(0xC000, 0x4000)
    await test_and16(0x6000, 0x2000)
    await test_and16(0x0007, 0x0003)
    await test_and16(0x8003, 0x8001)
    await test_and16(0xC001, 0xC000)
    await test_and16(0xE000, 0x6000)
    await test_and16(0x8007, 0x8003)
    await test_and16(0xC003, 0xC001)
    await test_and16(0xE001, 0xE000)
    await test_and16(0xC007, 0xC003)
    await test_and16(0xE003, 0xE001)
    await test_and16(0xE007, 0xE003)
    await test_and16(0x1FF8, 0x0FF8)
    await test_and16(0x1FFC, 0x0FFC)
    await test_and16(0x3FF8, 0x1FF8)
    await test_and16(0x7FF8, 0x3FF8)
    await test_and16(0x3FFC, 0x1FFC)
    await test_and16(0x1FFE, 0x0FFE)
    await test_and16(0xFFF8, 0x7FF8)
    await test_and16(0x7FFC, 0x3FFC)
    await test_and16(0x3FFE, 0x1FFE)
    await test_and16(0x1FFF, 0x0FFF)
    await test_and16(0xFFF9, 0xFFF8)
    await test_and16(0xFFFC, 0x7FFC)
    await test_and16(0x7FFE, 0x3FFE)
    await test_and16(0x3FFF, 0x1FFF)
    await test_and16(0x9FFF, 0x8FFF)
    await test_and16(0xFFFB, 0xFFF9)
    await test_and16(0xFFFD, 0xFFFC)
    await test_and16(0xFFFE, 0x7FFE)
    await test_and16(0x7FFF, 0x3FFF)
    await test_and16(0xBFFF, 0x9FFF)
    await test_and16(0xDFFF, 0xCFFF)
    await test_and16(0xFFFF, 0xFFFF)
    await test_and16(0x1111, 0x0000)
    await test_and16(0x2222, 0x0000)
    await test_and16(0x3333, 0x1111)
    await test_and16(0x4444, 0x0000)
    await test_and16(0x5555, 0x0000)
    await test_and16(0x6666, 0x2222)
    await test_and16(0x7777, 0x3333)
    await test_and16(0x8888, 0x0000)
    await test_and16(0x9999, 0x8888)
    await test_and16(0xAAAA, 0x0000)
    await test_and16(0xBBBB, 0x9999)
    await test_and16(0xCCCC, 0x4444)
    await test_and16(0xDDDD, 0xCCCC)
    await test_and16(0xEEEE, 0x6666)

    # AND32
    await test_and32(0x00000000, 0x00000000)
    await test_and32(0x00000004, 0x00000000)
    await test_and32(0x00000002, 0x00000000)
    await test_and32(0x00000001, 0x00000000)
    await test_and32(0x80000000, 0x00000000)
    await test_and32(0x40000000, 0x00000000)
    await test_and32(0x20000000, 0x00000000)
    await test_and32(0x00000006, 0x00000002)
    await test_and32(0x00000003, 0x00000001)
    await test_and32(0x80000001, 0x80000000)
    await test_and32(0xC0000000, 0x40000000)
    await test_and32(0x60000000, 0x20000000)
    await test_and32(0x00000007, 0x00000003)
    await test_and32(0x80000003, 0x80000001)
    await test_and32(0xC0000001, 0xC0000000)
    await test_and32(0xE0000000, 0x60000000)
    await test_and32(0x80000007, 0x80000003)
    await test_and32(0xC0000003, 0xC0000001)
    await test_and32(0xE0000001, 0xE0000000)
    await test_and32(0xC0000007, 0xC0000003)
    await test_and32(0xE0000003, 0xE0000001)
    await test_and32(0xE0000007, 0xE0000003)
    await test_and32(0x1FFFFFF8, 0x0FFFFFF8)
    await test_and32(0x1FFFFFFC, 0x0FFFFFFC)
    await test_and32(0x3FFFFFF8, 0x1FFFFFF8)
    await test_and32(0x7FFFFFF8, 0x3FFFFFF8)
    await test_and32(0x3FFFFFFC, 0x1FFFFFFC)
    await test_and32(0x1FFFFFFE, 0x0FFFFFFE)
    await test_and32(0xFFFFFFF8, 0x7FFFFFF8)
    await test_and32(0x7FFFFFFC, 0x3FFFFFFC)
    await test_and32(0x3FFFFFFE, 0x1FFFFFFE)
    await test_and32(0x1FFFFFFF, 0x0FFFFFFF)
    await test_and32(0xFFFFFFF9, 0xFFFFFFF8)
    await test_and32(0xFFFFFFFC, 0x7FFFFFFC)
    await test_and32(0x7FFFFFFE, 0x3FFFFFFE)
    await test_and32(0x3FFFFFFF, 0x1FFFFFFF)
    await test_and32(0x9FFFFFFF, 0x8FFFFFFF)
    await test_and32(0xFFFFFFFB, 0xFFFFFFF9)
    await test_and32(0xFFFFFFFD, 0xFFFFFFFC)
    await test_and32(0xFFFFFFFE, 0x7FFFFFFE)
    await test_and32(0x7FFFFFFF, 0x3FFFFFFF)
    await test_and32(0xBFFFFFFF, 0x9FFFFFFF)
    await test_and32(0xDFFFFFFF, 0xCFFFFFFF)
    await test_and32(0xFFFFFFFF, 0xFFFFFFFF)
    await test_and32(0x11111111, 0x00000000)
    await test_and32(0x22222222, 0x00000000)
    await test_and32(0x33333333, 0x11111111)
    await test_and32(0x44444444, 0x00000000)
    await test_and32(0x55555555, 0x00000000)
    await test_and32(0x66666666, 0x22222222)
    await test_and32(0x77777777, 0x33333333)
    await test_and32(0x88888888, 0x00000000)
    await test_and32(0x99999999, 0x88888888)
    await test_and32(0xAAAAAAAA, 0x00000000)
    await test_and32(0xBBBBBBBB, 0x99999999)
    await test_and32(0xCCCCCCCC, 0x44444444)
    await test_and32(0xDDDDDDDD, 0xCCCCCCCC)
    await test_and32(0xEEEEEEEE, 0x66666666)

    # OR16
    await test_or16(0x0000, 0x0000)
    await test_or16(0x0004, 0x0006)
    await test_or16(0x0002, 0x0003)
    await test_or16(0x0001, 0x8001)
    await test_or16(0x8000, 0xC000)
    await test_or16(0x4000, 0x6000)
    await test_or16(0x2000, 0x3000)
    await test_or16(0x0006, 0x0007)
    await test_or16(0x0003, 0x8003)
    await test_or16(0x8001, 0xC001)
    await test_or16(0xC000, 0xE000)
    await test_or16(0x6000, 0x7000)
    await test_or16(0x0007, 0x8007)
    await test_or16(0x8003, 0xC003)
    await test_or16(0xC001, 0xE001)
    await test_or16(0xE000, 0xF000)
    await test_or16(0x8007, 0xC007)
    await test_or16(0xC003, 0xE003)
    await test_or16(0xE001, 0xF001)
    await test_or16(0xC007, 0xE007)
    await test_or16(0xE003, 0xF003)
    await test_or16(0xE007, 0xF007)
    await test_or16(0x1FF8, 0x1FFC)
    await test_or16(0x1FFC, 0x1FFE)
    await test_or16(0x3FF8, 0x3FFC)
    await test_or16(0x7FF8, 0x7FFC)
    await test_or16(0x3FFC, 0x3FFE)
    await test_or16(0x1FFE, 0x1FFF)
    await test_or16(0xFFF8, 0xFFFC)
    await test_or16(0x7FFC, 0x7FFE)
    await test_or16(0x3FFE, 0x3FFF)
    await test_or16(0x1FFF, 0x9FFF)
    await test_or16(0xFFF9, 0xFFFD)
    await test_or16(0xFFFC, 0xFFFE)
    await test_or16(0x7FFE, 0x7FFF)
    await test_or16(0x3FFF, 0xBFFF)
    await test_or16(0x9FFF, 0xDFFF)
    await test_or16(0xFFFB, 0xFFFF)
    await test_or16(0xFFFD, 0xFFFF)
    await test_or16(0xFFFE, 0xFFFF)
    await test_or16(0x7FFF, 0xFFFF)
    await test_or16(0xBFFF, 0xFFFF)
    await test_or16(0xDFFF, 0xFFFF)
    await test_or16(0xFFFF, 0xFFFF)
    await test_or16(0x1111, 0x9999)
    await test_or16(0x2222, 0x3333)
    await test_or16(0x3333, 0xBBBB)
    await test_or16(0x4444, 0x6666)
    await test_or16(0x5555, 0xFFFF)
    await test_or16(0x6666, 0x7777)
    await test_or16(0x7777, 0xFFFF)
    await test_or16(0x8888, 0xCCCC)
    await test_or16(0x9999, 0xDDDD)
    await test_or16(0xAAAA, 0xFFFF)
    await test_or16(0xBBBB, 0xFFFF)
    await test_or16(0xCCCC, 0xEEEE)
    await test_or16(0xDDDD, 0xFFFF)
    await test_or16(0xEEEE, 0xFFFF)

    # OR32
    await test_or32(0x00000000, 0x00000000)
    await test_or32(0x00000004, 0x00000006)
    await test_or32(0x00000002, 0x00000003)
    await test_or32(0x00000001, 0x80000001)
    await test_or32(0x80000000, 0xC0000000)
    await test_or32(0x40000000, 0x60000000)
    await test_or32(0x20000000, 0x30000000)
    await test_or32(0x00000006, 0x00000007)
    await test_or32(0x00000003, 0x80000003)
    await test_or32(0x80000001, 0xC0000001)
    await test_or32(0xC0000000, 0xE0000000)
    await test_or32(0x60000000, 0x70000000)
    await test_or32(0x00000007, 0x80000007)
    await test_or32(0x80000003, 0xC0000003)
    await test_or32(0xC0000001, 0xE0000001)
    await test_or32(0xE0000000, 0xF0000000)
    await test_or32(0x80000007, 0xC0000007)
    await test_or32(0xC0000003, 0xE0000003)
    await test_or32(0xE0000001, 0xF0000001)
    await test_or32(0xC0000007, 0xE0000007)
    await test_or32(0xE0000003, 0xF0000003)
    await test_or32(0xE0000007, 0xF0000007)
    await test_or32(0x1FFFFFF8, 0x1FFFFFFC)
    await test_or32(0x1FFFFFFC, 0x1FFFFFFE)
    await test_or32(0x3FFFFFF8, 0x3FFFFFFC)
    await test_or32(0x7FFFFFF8, 0x7FFFFFFC)
    await test_or32(0x3FFFFFFC, 0x3FFFFFFE)
    await test_or32(0x1FFFFFFE, 0x1FFFFFFF)
    await test_or32(0xFFFFFFF8, 0xFFFFFFFC)
    await test_or32(0x7FFFFFFC, 0x7FFFFFFE)
    await test_or32(0x3FFFFFFE, 0x3FFFFFFF)
    await test_or32(0x1FFFFFFF, 0x9FFFFFFF)
    await test_or32(0xFFFFFFF9, 0xFFFFFFFD)
    await test_or32(0xFFFFFFFC, 0xFFFFFFFE)
    await test_or32(0x7FFFFFFE, 0x7FFFFFFF)
    await test_or32(0x3FFFFFFF, 0xBFFFFFFF)
    await test_or32(0x9FFFFFFF, 0xDFFFFFFF)
    await test_or32(0xFFFFFFFB, 0xFFFFFFFF)
    await test_or32(0xFFFFFFFD, 0xFFFFFFFF)
    await test_or32(0xFFFFFFFE, 0xFFFFFFFF)
    await test_or32(0x7FFFFFFF, 0xFFFFFFFF)
    await test_or32(0xBFFFFFFF, 0xFFFFFFFF)
    await test_or32(0xDFFFFFFF, 0xFFFFFFFF)
    await test_or32(0xFFFFFFFF, 0xFFFFFFFF)
    await test_or32(0x11111111, 0x99999999)
    await test_or32(0x22222222, 0x33333333)
    await test_or32(0x33333333, 0xBBBBBBBB)
    await test_or32(0x44444444, 0x66666666)
    await test_or32(0x55555555, 0xFFFFFFFF)
    await test_or32(0x66666666, 0x77777777)
    await test_or32(0x77777777, 0xFFFFFFFF)
    await test_or32(0x88888888, 0xCCCCCCCC)
    await test_or32(0x99999999, 0xDDDDDDDD)
    await test_or32(0xAAAAAAAA, 0xFFFFFFFF)
    await test_or32(0xBBBBBBBB, 0xFFFFFFFF)
    await test_or32(0xCCCCCCCC, 0xEEEEEEEE)
    await test_or32(0xDDDDDDDD, 0xFFFFFFFF)
    await test_or32(0xEEEEEEEE, 0xFFFFFFFF)

    # XOR16
    await test_xor16(0x0000, 0x0000)
    await test_xor16(0x0004, 0x0006)
    await test_xor16(0x0002, 0x0003)
    await test_xor16(0x0001, 0x8001)
    await test_xor16(0x8000, 0xC000)
    await test_xor16(0x4000, 0x6000)
    await test_xor16(0x2000, 0x3000)
    await test_xor16(0x0006, 0x0005)
    await test_xor16(0x0003, 0x8002)
    await test_xor16(0x8001, 0x4001)
    await test_xor16(0xC000, 0xA000)
    await test_xor16(0x6000, 0x5000)
    await test_xor16(0x0007, 0x8004)
    await test_xor16(0x8003, 0x4002)
    await test_xor16(0xC001, 0x2001)
    await test_xor16(0xE000, 0x9000)
    await test_xor16(0x8007, 0x4004)
    await test_xor16(0xC003, 0x2002)
    await test_xor16(0xE001, 0x1001)
    await test_xor16(0xC007, 0x2004)
    await test_xor16(0xE003, 0x1002)
    await test_xor16(0xE007, 0x1004)
    await test_xor16(0x1FF8, 0x1004)
    await test_xor16(0x1FFC, 0x1002)
    await test_xor16(0x3FF8, 0x2004)
    await test_xor16(0x7FF8, 0x4004)
    await test_xor16(0x3FFC, 0x2002)
    await test_xor16(0x1FFE, 0x1001)
    await test_xor16(0xFFF8, 0x8004)
    await test_xor16(0x7FFC, 0x4002)
    await test_xor16(0x3FFE, 0x2001)
    await test_xor16(0x1FFF, 0x9000)
    await test_xor16(0xFFF9, 0x0005)
    await test_xor16(0xFFFC, 0x8002)
    await test_xor16(0x7FFE, 0x4001)
    await test_xor16(0x3FFF, 0xA000)
    await test_xor16(0x9FFF, 0x5000)
    await test_xor16(0xFFFB, 0x0006)
    await test_xor16(0xFFFD, 0x0003)
    await test_xor16(0xFFFE, 0x8001)
    await test_xor16(0x7FFF, 0xC000)
    await test_xor16(0xBFFF, 0x6000)
    await test_xor16(0xDFFF, 0x3000)
    await test_xor16(0xFFFF, 0x0000)
    await test_xor16(0x1111, 0x9999)
    await test_xor16(0x2222, 0x3333)
    await test_xor16(0x3333, 0xAAAA)
    await test_xor16(0x4444, 0x6666)
    await test_xor16(0x5555, 0xFFFF)
    await test_xor16(0x6666, 0x5555)
    await test_xor16(0x7777, 0xCCCC)
    await test_xor16(0x8888, 0xCCCC)
    await test_xor16(0x9999, 0x5555)
    await test_xor16(0xAAAA, 0xFFFF)
    await test_xor16(0xBBBB, 0x6666)
    await test_xor16(0xCCCC, 0xAAAA)
    await test_xor16(0xDDDD, 0x3333)
    await test_xor16(0xEEEE, 0x9999)

    # XOR32
    await test_xor32(0x00000000, 0x00000000)
    await test_xor32(0x00000004, 0x00000006)
    await test_xor32(0x00000002, 0x00000003)
    await test_xor32(0x00000001, 0x80000001)
    await test_xor32(0x80000000, 0xC0000000)
    await test_xor32(0x40000000, 0x60000000)
    await test_xor32(0x20000000, 0x30000000)
    await test_xor32(0x00000006, 0x00000005)
    await test_xor32(0x00000003, 0x80000002)
    await test_xor32(0x80000001, 0x40000001)
    await test_xor32(0xC0000000, 0xA0000000)
    await test_xor32(0x60000000, 0x50000000)
    await test_xor32(0x00000007, 0x80000004)
    await test_xor32(0x80000003, 0x40000002)
    await test_xor32(0xC0000001, 0x20000001)
    await test_xor32(0xE0000000, 0x90000000)
    await test_xor32(0x80000007, 0x40000004)
    await test_xor32(0xC0000003, 0x20000002)
    await test_xor32(0xE0000001, 0x10000001)
    await test_xor32(0xC0000007, 0x20000004)
    await test_xor32(0xE0000003, 0x10000002)
    await test_xor32(0xE0000007, 0x10000004)
    await test_xor32(0x1FFFFFF8, 0x10000004)
    await test_xor32(0x1FFFFFFC, 0x10000002)
    await test_xor32(0x3FFFFFF8, 0x20000004)
    await test_xor32(0x7FFFFFF8, 0x40000004)
    await test_xor32(0x3FFFFFFC, 0x20000002)
    await test_xor32(0x1FFFFFFE, 0x10000001)
    await test_xor32(0xFFFFFFF8, 0x80000004)
    await test_xor32(0x7FFFFFFC, 0x40000002)
    await test_xor32(0x3FFFFFFE, 0x20000001)
    await test_xor32(0x1FFFFFFF, 0x90000000)
    await test_xor32(0xFFFFFFF9, 0x00000005)
    await test_xor32(0xFFFFFFFC, 0x80000002)
    await test_xor32(0x7FFFFFFE, 0x40000001)
    await test_xor32(0x3FFFFFFF, 0xA0000000)
    await test_xor32(0x9FFFFFFF, 0x50000000)
    await test_xor32(0xFFFFFFFB, 0x00000006)
    await test_xor32(0xFFFFFFFD, 0x00000003)
    await test_xor32(0xFFFFFFFE, 0x80000001)
    await test_xor32(0x7FFFFFFF, 0xC0000000)
    await test_xor32(0xBFFFFFFF, 0x60000000)
    await test_xor32(0xDFFFFFFF, 0x30000000)
    await test_xor32(0xFFFFFFFF, 0x00000000)
    await test_xor32(0x11111111, 0x99999999)
    await test_xor32(0x22222222, 0x33333333)
    await test_xor32(0x33333333, 0xAAAAAAAA)
    await test_xor32(0x44444444, 0x66666666)
    await test_xor32(0x55555555, 0xFFFFFFFF)
    await test_xor32(0x66666666, 0x55555555)
    await test_xor32(0x77777777, 0xCCCCCCCC)
    await test_xor32(0x88888888, 0xCCCCCCCC)
    await test_xor32(0x99999999, 0x55555555)
    await test_xor32(0xAAAAAAAA, 0xFFFFFFFF)
    await test_xor32(0xBBBBBBBB, 0x66666666)
    await test_xor32(0xCCCCCCCC, 0xAAAAAAAA)
    await test_xor32(0xDDDDDDDD, 0x33333333)
    await test_xor32(0xEEEEEEEE, 0x99999999)

    # SELECT16
    await test_select16(0x0000, 0x0000, 0x0000)
    await test_select16(0x0000, 0x000F, 0x0000)
    await test_select16(0x0000, 0x00F0, 0x0000)
    await test_select16(0x0000, 0x0F00, 0x0000)
    await test_select16(0x0000, 0xF000, 0x0000)
    await test_select16(0x0000, 0x00FF, 0x0000)
    await test_select16(0x0000, 0x0F0F, 0x0000)
    await test_select16(0x0000, 0x0FF0, 0x0000)
    await test_select16(0x0000, 0xF00F, 0x0000)
    await test_select16(0x0000, 0xF0F0, 0x0000)
    await test_select16(0x0000, 0xFF00, 0x0000)
    await test_select16(0x0000, 0x0FFF, 0x0000)
    await test_select16(0x0000, 0xF0FF, 0x0000)
    await test_select16(0x0000, 0xFF0F, 0x0000)
    await test_select16(0x0000, 0xFFF0, 0x0000)
    await test_select16(0x0000, 0xFFFF, 0x0000)
    await test_select16(0x369C, 0x0000, 0x0000)
    await test_select16(0x369C, 0x000F, 0x000C)
    await test_select16(0x369C, 0x00F0, 0x0009)
    await test_select16(0x369C, 0x0F00, 0x0006)
    await test_select16(0x369C, 0xF000, 0x0003)
    await test_select16(0x369C, 0x00FF, 0x009C)
    await test_select16(0x369C, 0x0F0F, 0x006C)
    await test_select16(0x369C, 0x0FF0, 0x0069)
    await test_select16(0x369C, 0xF00F, 0x003C)
    await test_select16(0x369C, 0xF0F0, 0x0039)
    await test_select16(0x369C, 0xFF00, 0x0036)
    await test_select16(0x369C, 0x0FFF, 0x069C)
    await test_select16(0x369C, 0xF0FF, 0x039C)
    await test_select16(0x369C, 0xFF0F, 0x036C)
    await test_select16(0x369C, 0xFFF0, 0x0369)
    await test_select16(0x369C, 0xFFFF, 0x369C)
    await test_select16(0xC963, 0x0000, 0x0000)
    await test_select16(0xC963, 0x000F, 0x0003)
    await test_select16(0xC963, 0x00F0, 0x0006)
    await test_select16(0xC963, 0x0F00, 0x0009)
    await test_select16(0xC963, 0xF000, 0x000C)
    await test_select16(0xC963, 0x00FF, 0x0063)
    await test_select16(0xC963, 0x0F0F, 0x0093)
    await test_select16(0xC963, 0x0FF0, 0x0096)
    await test_select16(0xC963, 0xF00F, 0x00C3)
    await test_select16(0xC963, 0xF0F0, 0x00C6)
    await test_select16(0xC963, 0xFF00, 0x00C9)
    await test_select16(0xC963, 0x0FFF, 0x0963)
    await test_select16(0xC963, 0xF0FF, 0x0C63)
    await test_select16(0xC963, 0xFF0F, 0x0C93)
    await test_select16(0xC963, 0xFFF0, 0x0C96)
    await test_select16(0xC963, 0xFFFF, 0xC963)
    await test_select16(0xFFFF, 0x0000, 0x0000)
    await test_select16(0xFFFF, 0x000F, 0x000F)
    await test_select16(0xFFFF, 0x00F0, 0x000F)
    await test_select16(0xFFFF, 0x0F00, 0x000F)
    await test_select16(0xFFFF, 0xF000, 0x000F)
    await test_select16(0xFFFF, 0x00FF, 0x00FF)
    await test_select16(0xFFFF, 0x0F0F, 0x00FF)
    await test_select16(0xFFFF, 0x0FF0, 0x00FF)
    await test_select16(0xFFFF, 0xF00F, 0x00FF)
    await test_select16(0xFFFF, 0xF0F0, 0x00FF)
    await test_select16(0xFFFF, 0xFF00, 0x00FF)
    await test_select16(0xFFFF, 0x0FFF, 0x0FFF)
    await test_select16(0xFFFF, 0xF0FF, 0x0FFF)
    await test_select16(0xFFFF, 0xFF0F, 0x0FFF)
    await test_select16(0xFFFF, 0xFFF0, 0x0FFF)
    await test_select16(0xFFFF, 0xFFFF, 0xFFFF)

    # SELECT32
    await test_select32(0x00000000, 0x00000000, 0x00000000)
    await test_select32(0x00000000, 0x000F000F, 0x00000000)
    await test_select32(0x00000000, 0x00F000F0, 0x00000000)
    await test_select32(0x00000000, 0x0F000F00, 0x00000000)
    await test_select32(0x00000000, 0xF000F000, 0x00000000)
    await test_select32(0x00000000, 0x00FF00FF, 0x00000000)
    await test_select32(0x00000000, 0x0F0F0F0F, 0x00000000)
    await test_select32(0x00000000, 0x0FF00FF0, 0x00000000)
    await test_select32(0x00000000, 0xF00FF00F, 0x00000000)
    await test_select32(0x00000000, 0xF0F0F0F0, 0x00000000)
    await test_select32(0x00000000, 0xFF00FF00, 0x00000000)
    await test_select32(0x00000000, 0x0FFF0FFF, 0x00000000)
    await test_select32(0x00000000, 0xF0FFF0FF, 0x00000000)
    await test_select32(0x00000000, 0xFF0FFF0F, 0x00000000)
    await test_select32(0x00000000, 0xFFF0FFF0, 0x00000000)
    await test_select32(0x00000000, 0xFFFFFFFF, 0x00000000)
    await test_select32(0x369C0A5F, 0x00000000, 0x00000000)
    await test_select32(0x369C0A5F, 0x000F000F, 0x000000CF)
    await test_select32(0x369C0A5F, 0x00F000F0, 0x00000095)
    await test_select32(0x369C0A5F, 0x0F000F00, 0x0000006A)
    await test_select32(0x369C0A5F, 0xF000F000, 0x00000030)
    await test_select32(0x369C0A5F, 0x00FF00FF, 0x00009C5F)
    await test_select32(0x369C0A5F, 0x0F0F0F0F, 0x00006CAF)
    await test_select32(0x369C0A5F, 0x0FF00FF0, 0x000069A5)
    await test_select32(0x369C0A5F, 0xF00FF00F, 0x00003C0F)
    await test_select32(0x369C0A5F, 0xF0F0F0F0, 0x00003905)
    await test_select32(0x369C0A5F, 0xFF00FF00, 0x0000360A)
    await test_select32(0x369C0A5F, 0x0FFF0FFF, 0x0069CA5F)
    await test_select32(0x369C0A5F, 0xF0FFF0FF, 0x0039C05F)
    await test_select32(0x369C0A5F, 0xFF0FFF0F, 0x0036C0AF)
    await test_select32(0x369C0A5F, 0xFFF0FFF0, 0x003690A5)
    await test_select32(0x369C0A5F, 0xFFFFFFFF, 0x369C0A5F)
    await test_select32(0xC96350FA, 0x00000000, 0x00000000)
    await test_select32(0xC96350FA, 0x000F000F, 0x0000003A)
    await test_select32(0xC96350FA, 0x00F000F0, 0x0000006F)
    await test_select32(0xC96350FA, 0x0F000F00, 0x00000090)
    await test_select32(0xC96350FA, 0xF000F000, 0x000000C5)
    await test_select32(0xC96350FA, 0x00FF00FF, 0x000063FA)
    await test_select32(0xC96350FA, 0x0F0F0F0F, 0x0000930A)
    await test_select32(0xC96350FA, 0x0FF00FF0, 0x0000960F)
    await test_select32(0xC96350FA, 0xF00FF00F, 0x0000C35A)
    await test_select32(0xC96350FA, 0xF0F0F0F0, 0x0000C65F)
    await test_select32(0xC96350FA, 0xFF00FF00, 0x0000C950)
    await test_select32(0xC96350FA, 0x0FFF0FFF, 0x009630FA)
    await test_select32(0xC96350FA, 0xF0FFF0FF, 0x00C635FA)
    await test_select32(0xC96350FA, 0xFF0FFF0F, 0x00C9350A)
    await test_select32(0xC96350FA, 0xFFF0FFF0, 0x00C9650F)
    await test_select32(0xC96350FA, 0xFFFFFFFF, 0xC96350FA)
    await test_select32(0xFFFFFFFF, 0x00000000, 0x00000000)
    await test_select32(0xFFFFFFFF, 0x000F000F, 0x000000FF)
    await test_select32(0xFFFFFFFF, 0x00F000F0, 0x000000FF)
    await test_select32(0xFFFFFFFF, 0x0F000F00, 0x000000FF)
    await test_select32(0xFFFFFFFF, 0xF000F000, 0x000000FF)
    await test_select32(0xFFFFFFFF, 0x00FF00FF, 0x0000FFFF)
    await test_select32(0xFFFFFFFF, 0x0F0F0F0F, 0x0000FFFF)
    await test_select32(0xFFFFFFFF, 0x0FF00FF0, 0x0000FFFF)
    await test_select32(0xFFFFFFFF, 0xF00FF00F, 0x0000FFFF)
    await test_select32(0xFFFFFFFF, 0xF0F0F0F0, 0x0000FFFF)
    await test_select32(0xFFFFFFFF, 0xFF00FF00, 0x0000FFFF)
    await test_select32(0xFFFFFFFF, 0x0FFF0FFF, 0x00FFFFFF)
    await test_select32(0xFFFFFFFF, 0xF0FFF0FF, 0x00FFFFFF)
    await test_select32(0xFFFFFFFF, 0xFF0FFF0F, 0x00FFFFFF)
    await test_select32(0xFFFFFFFF, 0xFFF0FFF0, 0x00FFFFFF)
    await test_select32(0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF)

    # MINGLE16
    await test_mingle16(0x0000, 0x0000, 0x00000000)
    await test_mingle16(0x0000, 0xFFFF, 0x55555555)
    await test_mingle16(0xFFFF, 0x0000, 0xAAAAAAAA)
    await test_mingle16(0xFFFF, 0xFFFF, 0xFFFFFFFF)
    await test_mingle16(0x0001, 0x0000, 0x00000002)
    await test_mingle16(0x0002, 0x0000, 0x00000008)
    await test_mingle16(0x0004, 0x0000, 0x00000020)
    await test_mingle16(0x0008, 0x0000, 0x00000080)
    await test_mingle16(0x1000, 0x0000, 0x02000000)
    await test_mingle16(0x2000, 0x0000, 0x08000000)
    await test_mingle16(0x4000, 0x0000, 0x20000000)
    await test_mingle16(0x8000, 0x0000, 0x80000000)
    await test_mingle16(0x0000, 0x0001, 0x00000001)
    await test_mingle16(0x0000, 0x0002, 0x00000004)
    await test_mingle16(0x0000, 0x0004, 0x00000010)
    await test_mingle16(0x0000, 0x0008, 0x00000040)
    await test_mingle16(0x0000, 0x1000, 0x01000000)
    await test_mingle16(0x0000, 0x2000, 0x04000000)
    await test_mingle16(0x0000, 0x4000, 0x10000000)
    await test_mingle16(0x0000, 0x8000, 0x40000000)
    await test_mingle16(0x0001, 0x0001, 0x00000003)
    await test_mingle16(0x0002, 0x0002, 0x0000000C)
    await test_mingle16(0x0004, 0x0004, 0x00000030)
    await test_mingle16(0x0008, 0x0008, 0x000000C0)
    await test_mingle16(0x1000, 0x1000, 0x03000000)
    await test_mingle16(0x2000, 0x2000, 0x0C000000)
    await test_mingle16(0x4000, 0x4000, 0x30000000)
    await test_mingle16(0x8000, 0x8000, 0xC0000000)
    await test_mingle16(0x000F, 0xF000, 0x550000AA)
    await test_mingle16(0xF000, 0x000F, 0xAA000055)
    await test_mingle16(0x00FF, 0xFF00, 0x5555AAAA)
    await test_mingle16(0xFF00, 0x00FF, 0xAAAA5555)
    await test_mingle16(0x0FF0, 0x0FF0, 0x00FFFF00)
    await test_mingle16(0x0FF0, 0xFFFF, 0x55FFFF55)
    await test_mingle16(0x0FFF, 0xFFF0, 0x55FFFFAA)
    await test_mingle16(0xFFF0, 0x0FFF, 0xAAFFFF55)
    await test_mingle16(0xFFFF, 0x0FF0, 0xAAFFFFAA)
    await test_mingle16(0xF00F, 0xF00F, 0xFF0000FF)
    await test_mingle16(0xF00F, 0xFFFF, 0xFF5555FF)
    await test_mingle16(0xF0FF, 0xFF0F, 0xFF55AAFF)
    await test_mingle16(0xFF0F, 0xF0FF, 0xFFAA55FF)
    await test_mingle16(0xFFFF, 0xF00F, 0xFFAAAAFF)
